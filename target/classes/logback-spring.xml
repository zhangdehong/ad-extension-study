<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="false" scan="true" scanPeriod="600000">
    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径 -->
    <!--    <property name="LOG_HOME" value="/data/logs" />-->
    <property name="LOG_HOME" value="/Users/zhangdehong/develop/logs"/>
    <contextName>${HOSTNAME}</contextName>
    <springProperty scope="context" name="appName"
                    source="spring.application.name"/>
    <springProperty scope="context" name="ip"
                    source="spring.cloud.client.ipAddress"/>
    <property name="osName" value="${os.name}"/>
    
    <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
    <property name="CONSOLE_LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %line [%yellow(%X{X-B3-TraceId}),%green(%X{X-B3-SpanId})] [%yellow(%thread)] %green(%logger{30}) %msg%n"/>
    
    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>utf-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>debug</level>
        </filter>
    </appender>
    
    <if condition='p("osName").contains("macOs")'>
        <then>
            <!-- 按照每天生成日志文件 -->
            <appender name="FILE"
                      class="ch.qos.logback.core.rolling.RollingFileAppender">
                <!-- 正在记录的日志文件的路径及文件名 -->
                <file>${LOG_HOME}/${appName}.log</file>
                <rollingPolicy
                        class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                    <!--日志文件输出的文件名 -->
                    <FileNamePattern>${LOG_HOME}/${appName}.%d{yyyy-MM-dd}.%i.log.gz</FileNamePattern>
                    <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                        <maxFileSize>1MB</maxFileSize>
                    </timeBasedFileNamingAndTriggeringPolicy>
                    <!-- 每个日志文件到100MB的时候开始切分，最多保留30天，但最大到20GB，哪怕没到30天也要删除多余的日志 -->
                    <MaxHistory>30</MaxHistory>
                    <maxFileSize>100MB</maxFileSize>
                    <totalSizeCap>20GB</totalSizeCap>
                </rollingPolicy>
                <encoder
                        class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
                    <providers>
                        <timestamp>
                            <timeZone>UTC</timeZone>
                        </timestamp>
                        <pattern>
                            <pattern>
                                {
                                "level": "%level",
                                "appName": "${appName}",
                                "requestId": "%X{requestId}",
                                "remoteIp": "%X{remoteIp}",
                                "traceId": "%X{X-B3-TraceId:-}",
                                "spanId": "%X{X-B3-SpanId:-}",
                                "parent": "%X{X-B3-ParentSpanId:-}",
                                "thread": "%thread",
                                "class": "%logger{40}",
                                "line": "%line",
                                "message": "%message",
                                "stack_trace": "%exception"
                                }
                            </pattern>
                        </pattern>
                        <stackTrace>
                            <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter">
                                <maxDepthPerThrowable>100</maxDepthPerThrowable>
                                <maxLength>20480</maxLength>
                                <rootCauseFirst>true</rootCauseFirst>
                            </throwableConverter>
                        </stackTrace>
                    </providers>
                </encoder>
            </appender>
        </then>
    </if>
    
    <!-- 日志输出级别 -->
    <root level="INFO">
        <appender-ref ref="STDOUT"/>
        
        <if condition='p("osName").contains("macOs")'>
            <then>
                <appender-ref ref="FILE"/>
            </then>
        </if>
    </root>
</configuration>